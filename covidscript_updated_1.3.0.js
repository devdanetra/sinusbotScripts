registerPlugin({
    name: 'COVID-19 Live Update',
    version: '1.1',
    description: 'Get latest statistics of COVID-19 (!coronavirus)',
    author: 'devdanetra@outlook.com',
	requiredModules: ["http"],
    vars: [
	{
        name: "helpMessage1",
        type: "string",
        title: "Your custom help message (line1).",
        placeholder: "[b][COVID-19 Help][/b]",
        default: "[b][COVID-19 Help][/b]",
    },
	{
        name: "helpMessage2",
        type: "string",
        title: "Your custom help message (line2).",
        placeholder: "!coronavirus help (shows this)",
        default: "!coronavirus help (shows this)",
    },
	{
        name: "helpMessage3",
        type: "string",
        title: "Your custom help message (line3).",
        placeholder: "!coronavirus (Global statistics)",
        default: "!coronavirus (Global statistics)",
    },
	{
        name: "helpMessage4",
        type: "string",
        title: "Your custom help message (line4).",
        placeholder: "!coronavirus <countryname> (country statistics)",
        default: "!coronavirus <countryname> (country statistics)"
    },
	{
        name: "helpMessage5",
        type: "string",
        title: "Your custom help message (line5).",
        placeholder: "!coronavirus map (links live map)",
        default: "!coronavirus map (links live map)",
    },
	{
        name: "globalMessage1",
        type: "string",
        title: "Your custom global message (line1).",
        placeholder: "[b][COVID-19 Global Statistics][/b]",
        default: "[b][COVID-19 Global Statistics][/b]",
    },
	{
        name: "countryMessage1",
        type: "string",
        title: "Your custom country Message (line1)(You should leave an ending space, to include the country name generated by the script).",
        placeholder: "",
        default: "[b][COVID-19 ",
    },
	{
        name: "countryMessage2",
        type: "string",
        title: "Your custom country Message (line2).",
        placeholder: " Statistics][/b]",
        default: " Statistics][/b]",
    },
	{
        name: "totalInfected",
        type: "string",
        title: "Shows total infected.",
        placeholder: "Total Infected : ",
        default: "Total Infected : ",
    },
	{
        name: "infectedToday",
        type: "string",
        title: "Shows infected today.",
        placeholder: "Infected Today : ",
        default: "Infected Today : "
    },
	{
        name: "totalRecovered",
        type: "string",
        title: "Shows total Recovered.",
        placeholder: "Total Recovered : ",
        default: "Total Recovered : ",
    },
	{
        name: "totalDeaths",
        type: "string",
        title: "Shows total Deaths.",
        placeholder: "Total Deaths : ",
        default: "Total Deaths : "
    },
	{
        name: "deathsToday",
        type: "string",
        title: "Shows deaths today.",
        placeholder: "deaths Today : ",
        default: "Deaths Today : ",
    },
	{
        name: "criticalCases",
        type: "string",
        title: "Shows critical cases.",
        placeholder: "Critical Cases : ",
        default: "Critical Cases : ",
    },
	{
        name: "mapMessage",
        type: "string",
        title: "Links the map.",
        placeholder: "[COVID-19 Live Map by WHO][/b]",
        default: "[COVID-19 Live Map by WHO][/b]",
    },
	{
		name: "trackGlobalSwitch",
        title: 'Enable global tracking?',
        type: 'select',
        options: ['no', 'yes'],
		default: "no",
        },
	{
		name: "trackGlobalType",
        title: 'Global Info Type?',
        type: 'select',
        options: ['Description', 'Channel Name',  'Both'],
		default: "Description",
        },
	{
		name: "trackGlobalChannel",
        title: 'Select channel to edit for Global Tracking',
        type: 'channel',
        },
	{
		name : "trackCountrySwitch",
        title: 'Enable country tracking?',
        type: 'select',
        options: ['no', 'yes'],
		default: "no",
        },
	{
		name : "trackCountryType",
        title: 'Country Info Type?',
        type: 'select',
        options: ['Description', 'Channel Name',  'Both'],
		default: "Description",
        },
	{
		name: "trackCountryChannel"	,
        title: 'Select channel to edit for Country Tracking',
        type: 'channel',
        },
	{
		name: "trackCountryString",
        title: 'Insert tracked country (in english)',
        type: 'string',
		default: "italy",
        },
    {
		name : "trackProvinceSwitch",
        title: 'Enable country tracking?',
        type: 'select',
        options: ['no', 'yes'],
		default: "no",
        },
	{
		name : "trackProvinceType",
        title: 'Country Info Type?',
        type: 'select',
        options: ['Description', 'Channel Name',  'Both'],
		default: "Description",
        },
	{
		name: "trackProvinceChannel"	,
        title: 'Select channel to edit for Country Tracking',
        type: 'channel',
        },
	{
		name: "trackProvinceID",
        title: 'Insert tracked province(get number from https://corona.lmao.ninja/v2/jhucsse)',
        type: 'number',
		default: "1",
    },
	{
		name: "updateSeconds",
        title: 'Insert update time in seconds',
        type: 'number',
		default: "120",
    },
	],
}, function(sinusbot, config) {
	
	const engine = require('engine');
	const store = require('store');
	const backend = require('backend');
	const helpers = require('helpers');
	const format = require('format');
	const http = require('http');
	
	

	setInterval(updateChannels, config.updateSeconds *1000);


	function updateChannels() {   //checking to update global and country channel
		if(config.trackGlobalSwitch == 1){
			engine.log("Updating global Tracking channels.");
			updateGlobalChannel();
		}
		if(config.trackCountrySwitch == 1){
			engine.log("Updating country Tracking channels.");
			updateCountryChannel();
		}
        if(config.trackProvinceSwitch == 1){
			engine.log("Updating province Tracking channels.");
			updateProvinceChannel();
		}
		return;
    }
	
	function updateCountryChannel(){	//updates country channel
		
		var url = "https://corona.lmao.ninja/countries/" + config.trackCountryString;
		
		http.simpleRequest({
        'method': 'GET',
        'url': url,
        'timeout': 6000,
		}, function (error, response) {
        if (error) {
            engine.log("Error: " + error);
            return;
        }
        
        if (response.statusCode != 200) {
            engine.log("HTTP Error: " + response.status);
            return;
        }
        // success!
        engine.log("Response: " + response.data);
		var result = JSON.parse(response.data);
		let channel = backend.getChannelByID(config.trackCountryChannel);
		
		let newDescription = "\n        "+ config.countryMessage1 + result.country + config.countryMessage2;
		newDescription += "\n\n             " + config.totalInfected + result.cases;
		newDescription += "\n\n             " + config.infectedToday + result.todayCases;
		newDescription += "\n\n             " + config.totalRecovered + result.recovered;
		newDescription += "\n\n             " + config.totalDeaths + result.deaths;
		newDescription += "\n\n             " + config.deathsToday + result.todayDeaths;
		newDescription += "\n\n             " + config.criticalCases + result.critical;
		
		let newName = "[cspacer] "+ result.country + " | " + result.cases + " | " + result.recovered + " | " + result.deaths;
		
		if(config.trackCountryType==0){
			channel.setDescription(newDescription);
		}else if (config.trackCountryType==1){
			channel.setName(newName);
		}else{
			channel.setDescription(newDescription);
			channel.setName(newName);
		}
		return;
	})};

	function updateGlobalChannel(){		//updates global channel
		
		http.simpleRequest({
        'method': 'GET',
        'url': 'https://corona.lmao.ninja/all',
        'timeout': 6000,
    }, function (error, response) {
        if (error) {
            engine.log("Error: " + error);
            return;
        }
        
        if (response.statusCode != 200) {
            engine.log("HTTP Error: " + response.status);
            return;
        }
        
        // success!
        engine.log("Response: " + response.data);
		
		var result = JSON.parse(response.data);
		var channel = backend.getChannelByID(config.trackGlobalChannel);
		
		let newDescription = "\n         " + config.globalMessage1;
		
		newDescription += "\n\n             " + config.totalInfected + result.cases;
		newDescription += "\n\n             " + config.totalRecovered + result.recovered;
		newDescription += "\n\n             " + config.totalDeaths + result.deaths;
		
		let newName = "[cspacer] " + " | " + result.cases + " | " + result.recovered + " | " + result.deaths;
		
		if(config.trackGlobalType == 0){
			channel.setDescription(newDescription);
		}else if (config.trackGlobalType == 1){
			channel.setName(newName);
		}else{
			channel.setDescription(newDescription);
			channel.setName(newName);
		}
		return;
})};
	
	var event = require('event');
    event.on('chat', function(ev) {		//chat event function
		
        if (ev.client.isSelf())
			return;
		
		let message = ev.text.split(" ").filter(i => i.length > 0 && /\s/.test(i) === false);
        let command = message[0].toLowerCase();
		
		if(command.startsWith("!coronavirus")){
			if(ev.text == "!coronavirus"){
			sendResponse(ev.client);
			engine.log("Command received");
			}else if (ev.text == "!coronavirus help"){
			printHelp(ev.client);
			engine.log("Command received");
			}else if (ev.text == "!coronavirus map"){
			printMap(ev.client);
			engine.log("Command received");
			}else{
			sendCountryResponse(ev.client,message[1]);
			engine.log("Command received");
			return;
			}
		return;
	}});
    
    function updateProvinceChannel(){	//updates country channel
		
		var url = "https://corona.lmao.ninja/v2/jhucsse";
		
		http.simpleRequest({
        'method': 'GET',
        'url': url,
        'timeout': 6000,
		}, function (error, response) {
        if (error) {
            engine.log("Error: " + error);
            return;
        }
            
        if (response.statusCode != 200) {
            engine.log("HTTP Error: " + response.status);
            return;
        }
        // success!
		var result = JSON.parse(response.data);
		let channel = backend.getChannelByID(config.trackProvinceChannel);
		let provinceID = config.trackProvinceID;
        let customResult = result[provinceID];
            
		let newDescription = "\n        "+ config.countryMessage1 + customResult.province + config.countryMessage2;
		newDescription += "\n\n             " + config.totalInfected + customResult.stats.confirmed;
		newDescription += "\n\n             " + config.totalRecovered + customResult.stats.recovered;
		newDescription += "\n\n             " + config.totalDeaths + customResult.stats.deaths;
		
		let newName = "[cspacer] "+ customResult.province + " | " + customResult.stats.confirmed + " | " + customResult.stats.recovered + " | " + customResult.stats.deaths;
		
		if(config.trackProvinceType==0){
			channel.setDescription(newDescription);
		}else if (config.trackProvinceType==1){
			channel.setName(newName);
		}else{
			channel.setDescription(newDescription);
			channel.setName(newName);
		}
		return;
	})};
    
    
	
	function sendResponse(client){		//simple chat response (global)
	
		http.simpleRequest({
        'method': 'GET',
        'url': 'https://corona.lmao.ninja/all',
        'timeout': 6000,
    }, function (error, response) {
        if (error) {
            engine.log("Error: " + error);
            return;
        }
        
        if (response.statusCode != 200) {
            engine.log("HTTP Error: " + response.status);
            return;
        }
        
        // success!
        engine.log("Response: " + response.data);
		var result = JSON.parse(response.data);
		
		client.chat("\n        " + config.globalMessage1 +
		"\n\n             " + config.totalInfected + result.cases +
		"\n\n             " + config.totalRecovered + result.recovered +
		"\n\n             " + config.totalDeaths + result.deaths);
	})};

	function sendCountryResponse(client, country){		//simple chat response (country)
		var url = "https://corona.lmao.ninja/countries/" + country;
		http.simpleRequest({
        'method': 'GET',
        'url': url,
        'timeout': 6000,
    }, function (error, response) {
        if (error) {
            engine.log("Error: " + error);
            return;
        }
        
        if (response.statusCode != 200) {
            engine.log("HTTP Error: " + response.status);
            return;
        }
        // success!
        engine.log("Response: " + response.data);
		var result = JSON.parse(response.data);
		client.chat("\n        "+ config.countryMessage1 + result.country + config.countryMessage2 +
		"\n\n             " + config.totalInfected + result.cases +
		"\n\n             " + config.infectedToday + result.todayCases +
		"\n\n             " + config.totalRecovered + result.recovered +
		"\n\n             " + config.totalDeaths + result.deaths +
		"\n\n             " + config.deathsToday + result.todayDeaths +
		"\n\n             " + config.criticalCases + result.critical
		);
	})};
	
		function printHelp(client){		//displays help
		client.chat("\n        "+ config.helpMessage1 +
		"\n\n             " +  config.helpMessage2 +
		"\n\n             " + config.helpMessage3 +
		"\n\n             " + config.helpMessage4 +
		"\n\n             " + config.helpMessage5);
	};
	
		function printMap(client){		//displays map link
		client.chat("\n  [b]      " + config.mapMessage +
		"\n\n    		[url]https://bit.ly/tscoronavirus[/url]");
	};
	
});
